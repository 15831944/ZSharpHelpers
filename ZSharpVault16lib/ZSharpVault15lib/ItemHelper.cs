using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using Autodesk.Connectivity.WebServices;
using Autodesk.Connectivity.WebServicesTools;
using VDF = Autodesk.DataManagement.Client.Framework;

namespace ZSharpVault16lib
{
    public class ItemHelper
    {
        #region Variables
        private static NumSchm NS;
        private static string result;
        private static long[] mID;
        private static long[] sID;
        private static long[] rID;
        private static Item itemObj;
        private static Item[] itemObjs;
        private static StringArray[] ItemNSFieldInputs; 
        #endregion

        public static NumSchm GetNumScheme(VDF.Vault.Currency.Connections.Connection connection, string NumSchemeName)
        {
            try
            {
                foreach (var ns in connection.WebServiceManager.ItemService.GetNumberingSchemesByType(NumSchmType.Activated))
                {
                    if (ns.Name.Equals(NumSchemeName))
                    {
                        NS = ns;
                        //MessageBox.Show(ns.Name + " | " + ns.SchmID);
                        return NS;
                    }
                    else
                    {
                        NS = null;
                        //MessageBox.Show(ns.Name + " | " + ns.SchmID);
                    }
                }
            }
            catch (System.Exception ex)
            {
                //MessageBox.Show(ex.ToString());
            }
            return NS;
        }

        
        public static StringArray[] getItemNumArray(NumSchm NumScheme)
        {
            try
            {
                #region Get Array Size
                //cannot use this since we cannot have any items for items other than autogen type.
                //ItemNSFieldInputs = new StringArray[NumScheme.FieldArray.ToList().Count];
                int index = 0;
                foreach (var NsField in NumScheme.FieldArray)
                {
                    switch (NsField.FieldTyp.ToString())
                    {
                        case "PredefinedList":
                            {

                                break;
                            }
                        case "FreeText":
                            {

                                break;
                            }
                        case "Delimiter":
                            {

                                break;
                            }
                        case "FixedText":
                            {

                                break;
                            }
                        case "WorkgroupLabel":
                            {

                                break;
                            }
                        case "Autogenerated":
                            {
                                
                                index++;
                                break;
                            }
                    }
                    /* */
                }
                ItemNSFieldInputs = new StringArray[index];
                index = 0;
                #endregion

                #region GetNSARRAY
                StringArray tempArr;
                foreach (var NsField in NumScheme.FieldArray)
                {
                    tempArr = null;
                    string[] newItemNum;
                    switch (NsField.FieldTyp.ToString())
                    {
                        case "PredefinedList":
                            {

                                break;
                            }
                        case "FreeText":
                            {

                                break;
                            }
                        case "Delimiter":
                            {

                                break;
                            }
                        case "FixedText":
                            {

                                break;
                            }
                        case "WorkgroupLabel":
                            {

                                break;
                            }
                        case "Autogenerated":
                            {
                                newItemNum = new string[] { "" };
                                tempArr = new StringArray();
                                tempArr.Items = newItemNum;
                                ItemNSFieldInputs[index] = tempArr;
                                index++;
                                break;
                            }
                    }
                    /* */
                } 
                #endregion
            }
            catch (System.Exception ex)
            {
                
            }
            return ItemNSFieldInputs;
        }

        public static Item createITEM(ItemService IS, long catID, long numSchemeID, StringArray[] ItemNSFieldInputsDef, string itemTitle, string itemDesc)
        {

            try
            {
                GenVaultHelper.LibNotes();

                itemObj = IS.AddItemRevision(catID);
                ProductRestric[] pres;
                mID = new[] { itemObj.MasterId };
                sID = new[] { numSchemeID };
                rID = new[] { itemObj.RevId };

                ItemNum[] newNumbers = IS.AddItemNumbers(mID, sID, ItemNSFieldInputsDef, out pres);
                itemObj.ItemNum = newNumbers[0].ItemNum1;
                string[] itemNums = { itemObj.ItemNum };
                itemObj.Detail = itemTitle;
                itemObj.Title = itemDesc;
                IS.CommitItemNumbers(mID, itemNums);
                IS.UpdateAndCommitItems(new Item[] { itemObj });
            }
            catch (System.Exception ex)
            {
                //return ex.ToString();
            }
            return itemObj;// result = "Sucess";
        }

        public static Item[] updateITEM(ItemService IS, Item item, long PropDefID, string propValue)
        {
            try
            {
                var editITEM = IS.EditItems(new long[] { item.RevId })[0];
                GenVaultHelper.LibNotes();
                rID = new[] { editITEM.RevId };
                PropInstParam PIP = new PropInstParam() { PropDefId = PropDefID, Val = propValue };
                Item[] uitem = IS.UpdateItemProperties(rID, new PropInstParamArray[] { new PropInstParamArray() { Items = new PropInstParam[] { PIP } } });
                IS.UpdateAndCommitItems(uitem); //IS.UpdateAndCommitItems(new Item[] { item });
                //IS.DeleteUncommittedItems(false);
            }
            catch (System.Exception ex)
            {
                //return ex.ToString();
            }
            return itemObjs;
        }

        
    }
}
